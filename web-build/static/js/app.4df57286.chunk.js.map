{"version":3,"sources":["assets/images/index5.png","assets/images/index4.png","hooks/useColorScheme.ts","constants/Colors.ts","components/Themed.tsx","components/StyledText.tsx","screens/ModalScreen.tsx","screens/NotFoundScreen.tsx","components/EditScreenInfo.tsx","screens/TabOneScreen.tsx","screens/TabTwoScreen.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf","assets/images/startup_logo.png","assets/images/index.png","assets/images/team.jpeg"],"names":["module","exports","useColorScheme","_useColorScheme","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","theme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","View","backgroundColor","MonoText","fontFamily","ModalScreen","ScrollView","styles","container","title","separator","Image","logo","source","require","title5","StatusBar","Platform","OS","title2","logo3","title4","title3","StyleSheet","create","flex","alignItems","justifyContent","height","width","marginLeft","marginTop","fontSize","fontWeight","marginBottom","marginVertical","NotFoundScreen","navigation","TouchableOpacity","onPress","replace","link","linkText","padding","paddingVertical","EditScreenInfo","path","getStartedContainer","codeHighlightContainer","homeScreenFilename","getStartedText","borderRadius","paddingHorizontal","lineHeight","textAlign","helpContainer","marginHorizontal","helpLink","helpLinkText","TabOneScreen","logo2","logo4","TabTwoScreen","marginRight","linking","prefixes","Linking","config","screens","Root","TabOne","TabTwo","Modal","NotFound","Navigation","colorScheme","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","name","component","BottomTabNavigator","options","headerShown","Group","screenOptions","presentation","BottomTab","createBottomTabNavigator","initialRouteName","tabBarActiveTintColor","tabBarIcon","TabBarIcon","headerRight","Pressable","navigate","opacity","pressed","FontAwesome","size","App","isLoadingComplete","useState","setLoadingComplete","useEffect","a","async","SplashScreen","Font","font","console","warn","useCachedResources"],"mappings":"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","file":"static/js/app.4df57286.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/index5.76fc37c1.png\";","module.exports = __webpack_public_path__ + \"static/media/index4.ae34e7c5.png\";","import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import { StatusBar } from 'expo-status-bar';\nimport { Platform, StyleSheet, Image, ScrollView } from 'react-native';\nimport { MonoText } from '../components/StyledText';\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function ModalScreen() {\n  return (\n      <ScrollView>\n      <View style={styles.container}>\n      <MonoText style={styles.title}>How it works</MonoText>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <Image style={styles.logo} source={require('../assets/images/index5.png')} />\n      <MonoText style={styles.title5}>offer a flower to your planet</MonoText>\n      {/* <EditScreenInfo path=\"/screens/ModalScreen.tsx\" /> */}\n\n      {/* Use a light status bar on iOS to account for the black space above the modal */}\n      <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <MonoText style={styles.title2}>Which flowers are we selling ?</MonoText>\n      <Image style={styles.logo3} source={require('../assets/images/index4.png')} />\n      <MonoText style={styles.title2}>Contact us</MonoText>\n      <MonoText style={styles.title4}>adeleanneclaudy.zoaeter@alumni.esade.edu</MonoText>\n      <MonoText style={styles.title3}>olivia.gaubert@alumni.esade.edu</MonoText>\n    </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  logo: {\n    height: 150,\n    width: 200,\n    marginLeft: 10,\n    marginTop: 20,\n  },\n  logo3: {\n    height: 300,\n    width: 250,\n    marginLeft: \"5%\",\n    marginTop: 15,\n  },\n  title: {\n    color: 'black',\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  title2: {\n    color: 'black',\n    marginTop: 40,\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  title3: {\n    color: 'black',\n    marginTop: 20,\n    marginBottom: 40,\n    fontSize: 10,\n    fontWeight: 'bold',\n  },\n  title4: {\n    color: 'black',\n    marginTop: 20,\n    fontSize: 10,\n    fontWeight: 'bold',\n  },\n  title5: {\n    color: 'black',\n    marginTop: 40,\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n  separator: {\n    color: 'black',\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport { Text, View } from '../components/Themed';\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import * as WebBrowser from 'expo-web-browser';\nimport { StyleSheet, TouchableOpacity, Image} from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText style={styles.getStartedText}>{path}</MonoText>\n        </View>\n\n         {/*\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n        */}\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    width: '90%',\n    backgroundColor: 'white',\n    alignItems: 'center',\n    marginLeft: '5%',\n    // marginHorizontal: 50,\n  },\n  logo: {\n    height: 90,\n    width: 250,\n    marginLeft: 20,\n    marginTop: 20,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    color: 'black',\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n    marginBottom: 50,\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import { StyleSheet, ScrollView , Image} from 'react-native';\nimport { MonoText } from '../components/StyledText';\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View} from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\n\nexport default function TabOneScreen({ navigation }: RootTabScreenProps<'TabOne'>) {\n  return (\n    <View style={styles.container}>\n      <Image style={styles.logo} source={require('../assets/images/startup_logo.png')} />\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <ScrollView>\n        <Text style={styles.getStartedText} lightColor=\"rgba(0,0,0,0.8)\" darkColor=\"rgba(255,255,255,0.8)\"> What is the goal of this project ?\n        </Text>\n          <EditScreenInfo path=\"For all event  organizers concerned \n          about their community's ecological impact, PLANT A is a \n          sustainable  water provider that produces single use cans that are\n          not only biodegradable but also plant a flower every time it is thrown out.\"/>\n          <Image style={styles.logo2} source={require('../assets/images/index.png')} />\n          <EditScreenInfo path=\"More than water, Plant-A is your favorite event sponsor\n          Acting as distributors, we offer 2 alternatives:\n          - providing all the information for recycling the bottles\n          - we come pick up the bottles and take them to our trusted partners\" />\n          <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n          <MonoText style={styles.getStartedText}>How it works</MonoText>\n          <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n          <Image style={styles.logo4} source={require('../assets/images/index5.png')} />\n          <MonoText style={styles.title5}>offer a flower to your planet</MonoText>\n          <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n          <MonoText style={styles.title2}>Which flowers are we selling ?</MonoText>\n          <Image style={styles.logo3} source={require('../assets/images/index4.png')} />\n          <MonoText style={styles.title2}>Contact us</MonoText>\n          <MonoText style={styles.title4}>adeleanneclaudy.zoaeter@alumni.esade.edu</MonoText>\n          <MonoText style={styles.title3}>olivia.gaubert@alumni.esade.edu</MonoText>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  getStartedText: {\n    color: 'black',\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n    marginBottom: 50,\n  },\n  logo: {\n    height: 100,\n    width: 250,\n    marginLeft: 10,\n    marginTop: 20,\n  },\n  logo2: {\n    height: '15%',\n    width: 230,\n    marginLeft: 360,\n    marginBottom: 35,\n\n  },\n  logo3: {\n    height: 220,\n    width: 250,\n    marginLeft: \"18%\",\n    marginTop: 25,\n  },\n  logo4: {\n    height: '15%',\n    width: 250,\n    marginLeft: '35%',\n    marginTop: 20,\n  },\n  title: {\n    fontSize: 40,\n    fontWeight: 'bold',\n  },\n  title2: {\n    color: 'black',\n    marginTop: 40,\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginLeft: '30%',\n  },\n  title3: {\n    color: 'black',\n    marginTop: 20,\n    marginBottom: 40,\n    fontSize: 10,\n    fontWeight: 'bold',\n  },\n  title4: {\n    color: 'black',\n    marginTop: 20,\n    fontSize: 10,\n    fontWeight: 'bold',\n  },\n  title5: {\n    color: 'black',\n    marginTop: 40,\n    marginLeft: '38%',\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});","import { StyleSheet, Image, ScrollView} from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\nimport { MonoText } from '../components/StyledText';\n\nexport default function TabTwoScreen() {\n  return (\n    <View style={styles.container}>\n      <MonoText style={styles.title}>Who are we ?</MonoText>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <ScrollView>\n      <MonoText style={styles.getStartedText}>\n      We are 5 students who got together to start a project to fight for the environment.\n      In our team, there are two entrepreneurs who take care of all the finance, sponsor, business model, target audience.\n      2 Designers who designed the product in terms of its form its usefulness, and its design.\n      1 Programmer who has thought of how to make the product known through technology.\n      </MonoText>\n    <Image style={styles.logo} source={require('../assets/images/team.jpeg')} />\n    </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"#a38b57\",\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  getStartedText: {\n    color: 'white',\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n    marginBottom: 50,\n    marginLeft: 25,\n    marginRight: 25,\n  },\n  logo: {\n    height: 200,\n    width: 350,\n    marginLeft: '3%',\n    marginTop: 20,\n  },\n  logo2: {\n    height: 190,\n    width: 250,\n    marginLeft: \"18%\",\n    marginTop: 15,\n  },\n  logo3: {\n    height: 300,\n    width: 250,\n    marginLeft: \"15%\",\n    marginTop: 15,\n  },\n  title: {\n    color: 'white',\n    marginTop: 10,\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  title3: {\n    marginTop: 10,\n    fontSize: 15,\n    fontWeight: 'bold',\n    alignItems: 'center',\n    justifyContent: 'center',\n    lineHeight: 25,\n  },\n  title2: {\n    marginTop: 40,\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginLeft: '10%',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      Modal: 'modal',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { FontAwesome } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport { ColorSchemeName, Pressable } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport ModalScreen from '../screens/ModalScreen';\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { RootStackParamList, RootTabParamList, RootTabScreenProps } from '../types';\nimport LinkingConfiguration from './LinkingConfiguration';\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} options={{ headerShown: false }} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n      <Stack.Group screenOptions={{ presentation: 'modal' }}>\n        <Stack.Screen name=\"Manual\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"Menu\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint,\n      }}>\n      <BottomTab.Screen\n        name=\"Menu\"\n        component={TabOneScreen}\n        options={({ navigation }: RootTabScreenProps<'Menu'>) => ({\n          title: 'Menu',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n          headerRight: () => (\n            <Pressable\n              onPress={() => navigation.navigate('Manual')}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}>\n              <FontAwesome\n                name=\"info-circle\"\n                size={25}\n                color={Colors[colorScheme].text}\n                style={{ marginRight: 15 }}\n              />\n            </Pressable>\n          ),\n        })}\n      />\n      <BottomTab.Screen\n        name=\"About us\"\n        component={TabTwoScreen}\n        options={{\n          title: 'About us',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof FontAwesome>['name'];\n  color: string;\n}) {\n  return <FontAwesome size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n","import { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect, useState } from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","module.exports = __webpack_public_path__ + \"static/media/startup_logo.1baaa59a.png\";","module.exports = __webpack_public_path__ + \"static/media/index.4f67b765.png\";","module.exports = __webpack_public_path__ + \"static/media/team.1006622c.jpeg\";"],"sourceRoot":""}